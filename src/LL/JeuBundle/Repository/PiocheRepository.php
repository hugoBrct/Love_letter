<?php

namespace LL\JeuBundle\Repository;

/**
 * PiocheRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PiocheRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Permet de recuperer la liste des cartes pas encore piochÃ©
     * @param $id, id de la table
     * @return array, liste des cartes piochable
     */
    public function recupererCartePiochable($id){
        //recupere toute les cartes piochable dans
        // la pioche de la table en param
        $listCarte = $this->findBy(array('table' => $id));

        $qb = $this->createQueryBuilder('p');

        $qb->where('p.table != :table')
            ->setParameter('table', $id)
            ->andWhere('p.etat = :etat')
            ->setParameter('etat', 'pioche')
        ;

        return $listCarte = $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function recupererCartePlusForte($id){
        //Recupere toutes les cartes en main
        $listCarte = $this->findBy(array('table' => $id, 'etat' => 'enMain'));
        $max = 0;
        $array = array(
          "gagnant" => array(), "points" => $max
        );
        foreach ($listCarte as $carte){
            $vraicarte = $carte->getCarte();
            if($vraicarte->getPoint() > $max){
                $max = $vraicarte->getPoint();
                //On vide la liste des joueurs gagnant
                $array = array(
                    "gagnant" => array(), "points" => $max
                );
                //On ajoute ce joueur
                $array["gagnant"][] = $carte->getProprietaire();
            }
            elseif ($vraicarte->getPoint() == $max){
                //On l'ajoute a la liste de joueur gagnant
                $array["gagnant"][] = $carte->getProprietaire();
            }
        }
        return $array;
    }
}
